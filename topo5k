#!/usr/bin/env python
import datetime
import networkx as nx
from itertools import groupby
from operator import itemgetter
from pprint import pformat
from argparse import ArgumentParser, RawTextHelpFormatter
from execo import logger, Process, format_date
from execo.log import style
from execo_g5k import get_g5k_sites, get_oar_job_nodes, get_oargrid_job_nodes, \
    get_cluster_site, get_host_site, get_host_cluster, get_g5k_clusters, get_g5k_hosts
from execo_g5k.topology import g5k_graph, treemap
from xml.dom import minidom
from xml.etree.ElementTree import Element, SubElement, tostring, dump


# Initializing topo5k 
suffix = '.grid5000.fr'
sites = []
clusters = []
hosts = []
prog = 'topo5k'
version = '0.1'
description = 'This tool provides an access to the network topology of ' + \
    'the Grid\'5000 platform. It has two output format: \n' + \
    style.host('treemap') + ' = generate a map with networkx\n' + \
    style.host('simgrid') + ' = produce a SimGrid platform file'
epilog = ''


def main():
    """ """
    args = set_options()
    # Checking that mode given is valid
    if args.mode not in ['treemap', 'simgrid']:
        logger.error('Invalid mode selected: %s, \ntype %s for help',
                 style.emph(args.mode), style.emph(prog + ' -h'))
        exit()
    set_log_level(args)
    elements = define_elements(args)
    outfile = set_outfile(args, elements)

    gr = g5k_graph(elements)
    logger.debug('Nodes \n%s', pformat(sorted(gr.nodes(data=True))))
    logger.debug('Edges \n%s', pformat(sorted(gr.edges(data=True))))

    if args.mode == 'treemap':
        logger.info('Saving image file to %s', style.emph(outfile))
        plot = treemap(gr, compact=args.compact)
        plot.savefig(outfile, dpi=args.dpi)
    elif args.mode == 'simgrid':
        simgrid(gr, outfile=outfile)
        if args.check_simgrid:
            check = check_simgrid(outfile)
            if check:
                logger.info('Simgrid generated file is working')
            else:
                logger.info('Error in generated file')


def set_options():
    """ """
    # Options definition
    parser = ArgumentParser(prog=prog,
                            description=description,
                            epilog=epilog,
                            formatter_class=RawTextHelpFormatter,
                            add_help=False)
    optinout = parser.add_argument_group(style.host("General options"),
                                         "Define mode and controls I/O.")
    optinout.add_argument("-h", "--help",
                          action="help",
                          help="show this help message and exit")
    optinout.add_argument('--version',
                          action='version',
                          version='%(prog)s ' + version)
    optinout.add_argument("-m", "--mode",
                          dest="mode",
                          default='treemap',
                          help="Setup the mode: treemap or simgrid " +
                          "\ndefault = %(default)s")
    optinout.add_argument("-o", "--outfile",
                          dest="outfile",
                          help="Define the outfile name")
    optinout.add_argument('--compact',
                          dest='compact',
                          action="store_true",
                          help="Use cluster description instead of hosts")

    optio = optinout.add_mutually_exclusive_group()
    optio.add_argument("-q", "--quiet",
                       dest="quiet",
                       action="store_true",
                       default=False,
                       help="Run without printing anything")
    optio.add_argument("-v", "--verbose",
                       dest="verbose",
                       action="store_true",
                       default=False,
                       help="Run in verbose mode")

    resources = parser.add_mutually_exclusive_group()
    resources.add_argument("-r", "--resources",
                           dest="resources",
                           default="grid5000",
                           help="Comma separated list of Grid'5000 " +
                           "elements (grid5000 or sites )")
    resources.add_argument("-j", "--job-id",
                           dest="job_id",
                           default=None,
                           help="oar_job_id (site:XXXXX) or oargrid_job_id")

    optmap = parser.add_argument_group(style.host("TREEMAP options"))
    optmap.add_argument('--graphviz-program',
                        dest='graphviz',
                        default='neato',
                        help='Graphviz program used for position')
    optmap.add_argument('--dpi',
                        type=int,
                        dest="dpi",
                        default=300,
                        help="DPI of the image")
    optmap.add_argument('--all-nodes',
                        action="store_true",
                        dest="all_nodes",
                        help="Show all nodes labels")

    optsimgrid = parser.add_argument_group(style.host("SIMGRID options"))
    optsimgrid.add_argument('--check-simgrid',
                            dest='check_simgrid',
                            action="store_true",
                            help="Execute a masterslave example on the " +
                            "generated platform file (requires SimGrid)")

    return parser.parse_args()


def set_log_level(args):
    if args.verbose:
        logger.setLevel('DEBUG')
    elif args.quiet:
        logger.setLevel('WARN')
    else:
        logger.setLevel('INFO')
    logger.info('%s', style.log_header('-- Grid\'5000 network topology --'))


def define_elements(args):
    """ """
    elements = []
    if args.job_id:
        if ':' in args.job_id:
            for job in args.job_id.split(','):
                site, job_id = job.split(':')
                elements += get_oar_job_nodes(int(job_id), site)
        else:
            elements = get_oargrid_job_nodes(int(args.job_id))
    else:
        if 'grid5000' in args.resources.split(','):
            elements = get_g5k_sites()
        else:
            for element in args.resources.split(','):
                if element in get_g5k_sites() + get_g5k_clusters() + \
                    get_g5k_hosts():
                    elements.append(element)
                else:
                    logger.warning('%s is not a valid element', element)

    logger.info('topology of %s', ' '.join(map(lambda x: style.emph(x),
                                               elements)))
    return elements


def set_outfile(args, elements):
    """Define the name of the output file"""
    if args.outfile is None:
        outfile = ''
        if args.job_id:
            if ':' in args.job_id:
                for job in args.job_id.split(','):
                    site, job_id = job.split(':')
                    outfile += site + '_' + job_id + '_'
            else:
                outfile = args.job_id + '.png'
        else:
            hosts = filter(lambda x: x in get_g5k_hosts(), elements)
            clusters = list(set(filter(lambda x: x in get_g5k_clusters(), elements) \
                + map(get_host_cluster,
                      filter(lambda h: get_host_cluster(h) in get_g5k_clusters(),
                             elements))))
            sites = list(set(filter(lambda x: x in get_g5k_sites(), elements) + \
                             map(get_cluster_site, clusters)))
            if len(sites) == len(get_g5k_sites()):
                outfile = 'grid5000-' + str(datetime.date.today())
            else:
                outfile = '_'.join(sorted(sites)) + '-' + str(datetime.date.today())

        if args.mode == 'treemap':
            outfile += '.png'
        elif args.mode == 'simgrid':
            outfile += '.xml'
    else:
        outfile = args.outfile
    return outfile


def simgrid(gr, compact=True, outfile=None,
            tool_signature='Generated using %s %s' % (prog, version)):
    """ """
    def add_AS(elem, AS_id, routing="Floyd"):
        """Add an AS Element to an element"""
        logger.debug('Adding %s to %s', AS_id, elem)
        return SubElement(elem, 'AS', attrib={'id': AS_id, 'routing': routing})

    def add_site(elem, site):
        """ """
        AS_site = add_AS(elem, 'AS_' + site)
        router, d_router = gr.get_site_router(site)
        add_router(AS_site, router, str(d_router['backplane']))

        for cluster in gr.get_clusters(site):
            add_cluster(AS_site, cluster)

    def add_router(elem, router_id, backplane_bps=None):
        logger.debug('Adding limiter link for router')
        dump(elem)
        SubElement(elem, 'link', attrib={'id': 'gw_limiter',
                                         'bandwidth': backplane_bps,
                                         'latency': '0'})
        router_as = add_AS(elem, 'AS_' + router_id)
        SubElement(router_as, 'router', attrib={'id': router_id})

    def add_cluster(elem, cluster):
        """ """
        equips = {}
        for host in gr.get_hosts(cluster=cluster):
#            print gr.edges([host[0]] + gr.neighbors(host[0]), data=True)

            links = filter(lambda x: (x[0] == host[0] or x[1] == host[0])
                           and x[2]['active'],
                           gr.edges([host[0]] + gr.neighbors(host[0]),
                                    data=True))
            for l in links:
                bw = str(l[2]['bandwidth'])
                if l[1] not in equips:
                    equips[l[1]] = []
                equips[l[1]].append(host[0])
            cores = str(host[1]['cores'])
            power = str(host[1]['power'])

        if len(equips) == 1:
            radical = _get_radical_list(equips[equips.keys()[0]])
            AS_equip = elem.find("./AS[@id='" + equips.keys()[0] + "']")
            if not AS_equip:
                AS_equip = SubElement(elem, 'AS',
                                      attrib={'id': equips.keys()[0]})

            SubElement(AS_equip, 'cluster', attrib={'id': cluster,
                                                'radical': radical,
                                                'prefix': cluster + '-',
                                                'suffix': '.grid5000.fr',
                                                'power': power,
                                                'core': cores,
                                                'bw': bw,
                                                'lat': '0'})
        else:
            AS_cluster_total = add_AS(elem, cluster + '_total')
            for i, eq in enumerate(equips):
                radical = _get_radical_list(equips[eq])
                AS_sub_cluster = add_AS(AS_cluster_total, cluster + '_' +
                                        str(i))
                SubElement(AS_sub_cluster, 'cluster',
                           attrib={'id': cluster + '_' + str(i),
                                   'radical': radical,
                                   'prefix': cluster + '-',
                                   'suffix': '.grid5000.fr',
                                   'power': power,
                                   'core': cores,
                                   'bw': bw,
                                   'lat': '0'})

    def _get_radical_list(equip):
        """ """
        radical = ''
        radical_list = sorted(map(lambda x: int(x.split('-')[1]), equip))
        for k, g in groupby(enumerate(radical_list),
                        lambda (i, x): i - x):
            radical_range = map(itemgetter(1), g)
            if len(radical_range) > 1:
                radical += str(min(radical_range)) + '-' + \
                    str(max(radical_range))
            else:
                radical += str(radical_range[0])
            radical += ','
        return radical[:-1]

    platform = Element('platform', attrib={'version': '3'})

    sites = gr.get_sites()

#    print gr.nodes(), filter(lambda x: x[2]['active'], gr.edges(data=True))
    if len(sites) == 1:
        add_site(platform, sites[0])

#            print AS_clusters

    else:
        main_as = add_AS(platform, 'AS_grid5000')
        for site in sites:
            add_site(main_as, site)

    logger.info('Saving file to %s', style.emph(outfile))
    f = open(outfile, 'w')
    f.write('<?xml version="1.0" encoding="UTF-8"?>\n' +
            '<!DOCTYPE platform SYSTEM ' +
            '"http://simgrid.gforge.inria.fr/simgrid.dtd">\n' +
            '<!-- ' + tool_signature + '\n     ' +
            'API commit ' + gr.graph['api_commit'] +
            '\n     ' + format_date(gr.graph['date']) + ' -->\n' +
            prettify(platform))
    f.close()
#    exit()


def check_simgrid(fname):
    """ """
    cmd = './examples/masterslave/masterslave_arg ' + \
        fname + ' 10 5'
    logger.info('Executing %s with generated platform file',
                style.command(cmd))
    Process('cd examples && tar -xzf masterslave.tgz',
                      shell=True).run()
    test = Process('./examples/masterslave/masterslave_arg ' +
                   fname + ' 10 5').run()
    Process('rm -rf examples/masterslave').run()

    return test.ok


def prettify(elem):
    """Return a pretty-printed XML string for the Element"""
    rough_string = tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ").replace('<?xml version="1.0" ?>\n',
                                                     '')

if __name__ == "__main__":
    main()

