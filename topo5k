#!/usr/bin/env python
from argparse import ArgumentParser, RawTextHelpFormatter
from time import time
from execo import logger
from execo.log import style
from execo_g5k import get_g5k_sites, get_oar_job_nodes, get_oargrid_job_nodes, \
get_host_site
from execo.time_utils import  format_date
from execo_g5k.topology import backbone_graph, site_graph, gr_to_image, \
    remove_non_g5k, gr_to_simgrid, filter_compute_nodes
import matplotlib.pyplot as plt
from networkx import shortest_path, compose

prog = 'topo5k'
description = 'This tool provides an access to the network topology of ' + \
    'the Grid\'5000 platform. It has two output format: \n' + \
    style.host('treemap') + ' = generate a map with networkx\n' + \
    style.host('simgrid') + ' = produce a SimGrid platform file'

epilog = ''

parser = ArgumentParser(prog=prog,
                        description=description,
                        epilog=epilog,
                        formatter_class=RawTextHelpFormatter,
                        add_help=False)
optinout = parser.add_argument_group(style.host("General options"),
                "Define mode and controls I/O.")
optinout.add_argument("-h", "--help",
                action="help",
                help="show this help message and exit")
optinout.add_argument('--version',
                action='version',
                version='%(prog)s 0.1')
optinout.add_argument("-m", "--mode",
                dest="mode",
                default='treemap',
                help="Setup the mode: map or simgrid " + \
                    "\ndefault = %(default)s")
optinout.add_argument("-o", "--outfile",
                dest="outfile",
                help="Define the outfile name")

optio = optinout.add_mutually_exclusive_group()
optio.add_argument("-q", "--quiet",
                dest="quiet",
                action="store_true",
                default=False,
                help="Run without printing anything")
optio.add_argument("-v", "--verbose",
                dest="verbose",
                action="store_true",
                default=False,
                help="Run in verbose mode")

resources = parser.add_mutually_exclusive_group()
resources.add_argument("-r", "--resources",
                dest="resources",
                default=None,
                help="Comma separated list of Grid'5000 elements " + \
                        "(grid5000 or sites )")
resources.add_argument("-j", "--job-id",
                dest="job_id",
                default=None,
                help="oar_job_id  (site:XXXXX) or oargrid_job_id ")

optmap = parser.add_argument_group(style.host("TREEMAP options"))
optmap.add_argument('-f', '--outfmt',
                    help='Image output format (jpg, png, svg)')
optmap.add_argument('--graphviz_program',
                help='Graphviz program used for positions computations ')
optmap.add_argument('--dpi')

optsimgrid = parser.add_argument_group(style.host("SIMGRID options"))


args = parser.parse_args()

if args.verbose:
    logger.setLevel('DEBUG')
elif args.quiet:
    logger.setLevel('WARN')
else:
    logger.setLevel('INFO')

logger.info('%s', style.log_header('-- Grid\'5000 network topology --'))

sites = []
clusters = []
nodes = []

if args.job_id:
    if ':' in args.job_id:
        site, job_id = args.job_id.split(':')
        nodes = get_oar_job_nodes(int(job_id), site)
        sites = [site]
        if args.outfile is None:
            args.outfile = site + '_' + job_id
    else:
        nodes = get_oargrid_job_nodes(int(args.job_id))
        for node in nodes:
            site = get_host_site(node)
            if site not in sites:
                sites.append(site)
        if args.outfile is None:
            args.outfile = args.job_id
else:
    if not args.resources:
        args.resources = 'grid5000'
    for element in args.resources.split(','):
        if element == 'grid5000':
            sites = get_g5k_sites()
            if args.outfile is None:
                args.outfile = 'grid5000'
            break
        elif element in get_g5k_sites():
            sites.append(element)

logger.info('topology of %s', ', '.join(map(lambda x: style.emph(x), sites)))

logger.info('retrieving data from %s', style.log_header('Grid\'5000 API'))
if len(sites) == 1:
    gr = site_graph(sites[0])
else:
    gr = backbone_graph()
    for site in sites:
        sgr = site_graph(site)
        gr = compose(gr, sgr)
    renater_used = []
    for site in sites:
        for dest in sites:
            if dest != site:
                renater_used += shortest_path(gr, 'renater.' + site,
                                              'renater.' + dest)
    renater_used = list(set(renater_used))
    for node in gr.nodes():
        if node.split('.')[1] not in sites and node not in renater_used:
            gr.remove_node(node)

remove_non_g5k(gr)

if len(nodes) > 0:
    filter_compute_nodes(gr, nodes)

if args.mode == 'treemap':
    logger.info('Generating image')
    gr_to_image(gr, outfile=args.outfile)
elif args.mode == 'simgrid':
    gr_to_simgrid(gr, outfile=args.outfile)
