#!/usr/bin/env python
from argparse import ArgumentParser, RawTextHelpFormatter
from time import time
from execo import logger
from execo.log import style
from execo_g5k import get_g5k_sites
from execo.time_utils import  format_date
from execo_g5k.topology import backbone_graph, site_graph
import matplotlib.pyplot as plt
from networkx import graphviz_layout, draw_networkx_nodes, draw_networkx_edges, \
    draw_networkx_labels, shortest_path

prog = 'topo5k'
description = 'This tool provides an access to the network topology of ' + \
    'the Grid\'5000 platform. It has two output format: \n' + \
    style.host('map') + ' = generate a map with networkx\n' + \
    style.host('simgrid') + ' = produce a SimGrid platform file'

epilog = ''

parser = ArgumentParser(prog=prog,
                        description=description,
                        epilog=epilog,
                        formatter_class=RawTextHelpFormatter,
                        add_help=False)
optinout = parser.add_argument_group(style.host("General options"),
                "Define mode and controls I/O.")
optinout.add_argument("-h", "--help",
                action="help",
                help="show this help message and exit")
optinout.add_argument('--version',
                action='version',
                version='%(prog)s 1.0.1')
optinout.add_argument("-m", "--mode",
                dest="mode",
                default='map',
                help="Setup the mode: map or simgrid " + \
                    "\ndefault = %(default)s")
optinout.add_argument("-o", "--outfile",
                dest="outfile",
                help="Define the outfile name")

optio = optinout.add_mutually_exclusive_group()
optio.add_argument("-q", "--quiet",
                dest="quiet",
                action="store_true",
                default=False,
                help="Run without printing anything")
optio.add_argument("-v", "--verbose",
                dest="verbose",
                action="store_true",
                default=False,
                help="Run in verbose mode")


parser.add_argument("-r", "--resources",
                dest="resources",
                default="grid5000",
                help="Comma separated list of Grid'5000 elements " + \
                        "(grid5000 or sites )")

args = parser.parse_args()

if args.verbose:
    logger.setLevel('DEBUG')
elif args.quiet:
    logger.setLevel('WARN')
else:
    logger.setLevel('INFO')

logger.setLevel('DEBUG')
logger.info('%s', style.log_header('-- Grid\'5000 network topology --'))

sites = []
clusters = []

for element in args.resources.split(','):
    if element == 'grid5000':
        sites = get_g5k_sites()
        args.outfile = 'grid5000'
        break
    elif element in get_g5k_sites():
        sites.append(element)

print sites

if len(sites) == 1:
    gr = site_graph(sites[0])
else:
    gr = backbone_graph()
    for node in gr.nodes():
        if 'renater' not in node and node.split('.')[1] not in sites:
            gr.remove_node(node)

    for site in sites:
        sgr = site_graph(site)
        gr.add_nodes_from(sgr.nodes_iter(data=True))
        gr.add_edges_from(sgr.edges_iter(data=True))


backbone = [node[0] for node in gr.nodes_iter(data=True)
    if node[1]['kind'] == 'renater']
gw_nodes = [node[0] for node in gr.nodes_iter(data=True)
    if node[1]['kind'] == 'router']
sw_nodes = [node[0] for node in gr.nodes_iter(data=True)
    if node[1]['kind'] == 'switch']
nodes_nodes = [node[0] for node in gr.nodes_iter(data=True)
    if node[1]['kind'] == 'node']

edges_1G = [(edge[0], edge[1]) for edge in gr.edges_iter(data=True)
    if edge[2]['bandwidth'] == 1000000000]
edges_3G = [(edge[0], edge[1]) for edge in gr.edges_iter(data=True)
    if edge[2]['bandwidth'] == 3000000000]
edges_10G = [(edge[0], edge[1]) for edge in gr.edges_iter(data=True)
    if edge[2]['bandwidth'] == 10000000000]
edges_20G = [(edge[0], edge[1]) for edge in gr.edges_iter(data=True)
    if edge[2]['bandwidth'] == 20000000000]
edges_other = [(edge[0], edge[1]) for edge in gr.edges_iter(data=True)
    if edge[2]['bandwidth'] not in [1000000000, 3000000000, 10000000000,
                                    20000000000]]


logger.info('Defining positions')
#pos = graphviz_layout(gr, prog='twopi')
pos = graphviz_layout(gr, prog='neato')

plt.figure(figsize=(15, 15))
draw_networkx_nodes(gr, pos, nodelist=backbone,
   node_shape='p', node_color='#9CF7BC', node_size=200)
draw_networkx_nodes(gr, pos, nodelist=gw_nodes,
   node_shape='8', node_color='#BFDFF2', node_size=300,
   labels=gw_nodes)
draw_networkx_nodes(gr, pos, nodelist=sw_nodes,
   node_shape='s', node_color='#F5C9CD', node_size=100)
draw_networkx_nodes(gr, pos, nodelist=nodes_nodes,
   node_shape='o', node_color='#F0F7BE', node_size=10)

logger.info('Drawing labels')
draw_networkx_labels(gr, pos,
    labels={node: node.split('.')[1].title() for node in backbone},
    font_size=16, font_weight='normal')
#draw_networkx_labels(gr, pos,
#    labels={node: node.split('.')[0].split('-')[0] for node in gw_nodes},
#    font_size=14, font_weight='normal')
draw_networkx_labels(gr, pos,
    labels={node: node.split('-')[0] for node in nodes_nodes if '-1.' in node},
    font_size=14, font_weight='normal')


logger.info('Drawing edges')
draw_networkx_edges(gr, pos, edgelist=edges_1G,
        edge_color='#aaaaaa', width=0.1)
draw_networkx_edges(gr, pos, edgelist=edges_3G,
        edge_color='#333333', width=0.3)
draw_networkx_edges(gr, pos, edgelist=edges_10G,
        width=1)

draw_networkx_edges(gr, pos, edgelist=edges_20G, width=2)

draw_networkx_edges(gr, pos, edgelist=edges_other,
        edge_color='r', width=1)

logger.info('Saving figure')
plt.axis('off')
plt.tight_layout()
outfile = '_'.join([site for site in sites]) if not args.outfile \
     else args.outfile

plt.savefig(outfile + '_' + format_date(time()) + '.png', bbox_inches='tight',
            dpi=300)

print outfile
